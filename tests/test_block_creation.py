# tests/test_block_creation.py
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å user_id

def test_create_new_block(monkeypatch):
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫—á–µ–π–Ω
    blockchain_name = "test_block_creation"
    blockchain_file = f"{hashlib.sha256(blockchain_name.encode()).hexdigest()}.json"
    blockchain_path = os.path.join(BLOCKCHAIN_DIR, blockchain_file)

    blockchain_data = {
        "blocks": [{
            "index": 0,
            "data": {
                "blockchain_name": blockchain_name,
                "owner": "owner_name"
            },
            "previous_hash": "0" * 64,
            "hash": hashlib.sha256("test_data".encode()).hexdigest()
        }],
        "file": blockchain_file  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á "file" –≤ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω–∞
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(BLOCKCHAIN_DIR, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫—á–µ–π–Ω –≤ —Ñ–∞–π–ª
    with open(blockchain_path, 'w') as f:
        json.dump(blockchain_data, f, indent=4)

    # üß™ Mock user inputs
    inputs = iter(["new block data"])
    monkeypatch.setattr('builtins.input', lambda _: next(inputs))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–∫—á–µ–π–Ω –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    new_block_data = "new block data"
    user_id = "test_user"  # –î–æ–±–∞–≤–ª—è–µ–º user_id
    create_new_block(blockchain_data, new_block_data, user_id=user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –±–ª–æ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    assert len(blockchain_data["blocks"]) == 2  # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω
    assert blockchain_data["blocks"][-1]["data"]["data"] == new_block_data  # –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    assert blockchain_data["blocks"][-1]["data"]["added_by"] == user_id  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ user_id
