import os
import subprocess
import json
import hashlib
from rich.console import Console
from rich.table import Table
from src.blockchain import Block

console = Console()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–æ–≤
BLOCKCHAIN_DIR = "blockchains"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–æ–≤
current_blockchain = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞
def create_blockchain():
    blockchain_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞: ").strip()
    if not blockchain_name:
        console.print("[red]–ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/red]")
        return
    
    blockchain_owner = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–ª–æ–∫—á–µ–π–Ω–∞: ").strip()
    if not blockchain_owner:
        console.print("[red]–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–ª–æ–∫—á–µ–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/red]")
        return

    owner_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–ª–æ–∫—á–µ–π–Ω–∞: ").strip()
    if not owner_password:
        console.print("[red]–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/red]")
        return

    hashed_password = hash_password(owner_password)
    
    blockchain_hash = hashlib.sha256(blockchain_name.encode()).hexdigest()
    blockchain_file = f"{blockchain_hash}.json"
    blockchain_path = os.path.join(BLOCKCHAIN_DIR, blockchain_file)

    if os.path.exists(blockchain_path):
        console.print(f"[red]–ë–ª–æ–∫—á–µ–π–Ω —Å –∏–º–µ–Ω–µ–º '{blockchain_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/red]")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(BLOCKCHAIN_DIR, exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ–∑–∏—Å-–±–ª–æ–∫–∞ —Å —Ö–µ—à–µ–º –∏–º–µ–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –ø–∞—Ä–æ–ª–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    genesis_block = Block(0, {"blockchain_name": blockchain_name, "owner": blockchain_owner, "owner_password_hash": hashed_password}, "0" * 64)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ —Ñ–∞–π–ª
    blockchain_data = {"blocks": [genesis_block.__dict__]}
    with open(blockchain_path, 'w') as f:
        json.dump(blockchain_data, f, indent=4)

    console.print(f"\n–ë–ª–æ–∫—á–µ–π–Ω '{blockchain_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    console.print(json.dumps(blockchain_data, indent=4))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞
def load_blockchain():
    blockchain_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ").strip()
    if not blockchain_name:
        console.print("[red]–ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/red]")
        return
    
    blockchain_hash = hashlib.sha256(blockchain_name.encode()).hexdigest()
    blockchain_file = f"{blockchain_hash}.json"
    blockchain_path = os.path.join(BLOCKCHAIN_DIR, blockchain_file)

    if not os.path.exists(blockchain_path):
        console.print(f"[red]–ë–ª–æ–∫—á–µ–π–Ω —Å –∏–º–µ–Ω–µ–º '{blockchain_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/red]")
        return
    
    with open(blockchain_path, 'r') as f:
        blockchain_data = json.load(f)

    console.print(f"\n–ë–ª–æ–∫—á–µ–π–Ω '{blockchain_name}' –∑–∞–≥—Ä—É–∂–µ–Ω.")
    console.print(json.dumps(blockchain_data, indent=4))

    global current_blockchain
    current_blockchain = blockchain_data
    current_blockchain["file"] = blockchain_file

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–≤
def list_blockchains():
    if not os.path.exists(BLOCKCHAIN_DIR):
        console.print("[red]–ü–∞–ø–∫–∞ —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
        return

    blockchains = []
    for filename in os.listdir(BLOCKCHAIN_DIR):
        if filename.endswith(".json"):
            blockchain_path = os.path.join(BLOCKCHAIN_DIR, filename)
            with open(blockchain_path, 'r') as f:
                blockchain_data = json.load(f)
                genesis_block = blockchain_data["blocks"][0]
                blockchain_name = genesis_block["data"]["blockchain_name"]
                owner = genesis_block["data"]["owner"]
                hash_genesis = genesis_block["hash"]
                blockchains.append((filename, blockchain_name, owner, hash_genesis))

    if not blockchains:
        console.print("[yellow]–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤.[/yellow]")
        return

    table = Table(title="–°–ø–∏—Å–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–æ–≤", show_header=True, header_style="bold cyan")
    table.add_column("–ò–º—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫—á–µ–π–Ω–∞", style="dim")
    table.add_column("–ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞", style="bold")
    table.add_column("–í–ª–∞–¥–µ–ª–µ—Ü", style="bold")
    table.add_column("–•–µ—à –≥–µ–Ω–µ–∑–∏—Å-–±–ª–æ–∫–∞", style="bold")

    for blockchain in blockchains:
        table.add_row(blockchain[0], blockchain[1], blockchain[2], blockchain[3])

    console.print(table)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
def run_tests():
    console.print("üß™ [bold magenta]–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...[/bold magenta]")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PYTHONPATH –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    env = os.environ.copy()
    env['PYTHONPATH'] = os.path.join(os.getcwd(), "src")
    try:
        subprocess.run(['pytest'], check=True, env=env)
    except subprocess.CalledProcessError as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}[/bold red]")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def update_project():
    console.print("üîÑ [bold cyan]–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...[/bold cyan]")
    subprocess.run(['chmod', '+x', './install-update.sh'], check=True)
    subprocess.run(['./install-update.sh'], check=True)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def display_menu():
    table = Table(title="–ú–µ–Ω—é pyChainLite", show_header=True, header_style="bold cyan")
    table.add_column("–ù–æ–º–µ—Ä", style="dim")
    table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="bold")
    
    table.add_row("1", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫—á–µ–π–Ω")
    table.add_row("2", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫—á–µ–π–Ω")
    table.add_row("3", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
    table.add_row("4", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    table.add_row("5", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–æ–≤")
    table.add_row("6", "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
    table.add_row("7", "–í—ã–π—Ç–∏")

    console.print(table)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
def main():
    while True:
        display_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()
        
        if choice == '1':
            create_blockchain()
        elif choice == '2':
            load_blockchain()
        elif choice == '3':
            if current_blockchain:
                console.print(json.dumps(current_blockchain, indent=4))
            else:
                console.print("[bold red]–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω.[/bold red]")
        elif choice == '4':
            run_tests()
        elif choice == '5':
            list_blockchains()
        elif choice == '6':
            update_project()
        elif choice == '7':
            console.print("[bold green]–í—ã—Ö–æ–¥...[/bold green]")
            break
        else:
            console.print("[bold red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 7.[/bold red]")

if __name__ == "__main__":
    main()
