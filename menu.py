import os
import json
import hashlib
import time
import subprocess
from rich.console import Console
from rich.table import Table

console = Console()

BLOCKCHAIN_DIR = "blockchains"
current_blockchain = None
current_blockchain_file = None

class Block:
    def __init__(self, index, data, previous_hash):
        self.index = index                        # –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
        self.timestamp = time.time()              # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞
        self.data = data                          # –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
        self.previous_hash = previous_hash        # –•–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
        self.hash = self.calculate_hash()         # –•–µ—à —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞

    def calculate_hash(self):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –±–ª–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö.
        """
        block_data = f"{self.index}{self.timestamp}{self.data}{self.previous_hash}"
        return hashlib.sha256(block_data.encode()).hexdigest()

    @classmethod
    def from_dict(cls, block_data):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Block –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑ JSON).
        """
        block = cls(block_data['index'], block_data['data'], block_data['previous_hash'])
        block.timestamp = block_data['timestamp']
        block.hash = block_data['hash']
        return block

    def __repr__(self):
        return (f"Block(index: {self.index}, timestamp: {self.timestamp}, "
                f"data: {self.data}, previous_hash: {self.previous_hash}, hash: {self.hash})")

class Blockchain:
    def __init__(self, name, owner):
        self.name = name
        self.owner = owner
        self.blocks = []

def create_new_blockchain():
    global current_blockchain, current_blockchain_file

    blockchain_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞: ")
    blockchain_hash = hashlib.sha256(blockchain_name.encode()).hexdigest()
    blockchain_file = os.path.join(BLOCKCHAIN_DIR, f"{blockchain_hash}.json")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–ª–æ–∫—á–µ–π–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if os.path.exists(blockchain_file):
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –±–ª–æ–∫—á–µ–π–Ω —Å –∏–º–µ–Ω–µ–º '{blockchain_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/bold red]")
        return

    owner = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–ª–æ–∫—á–µ–π–Ω–∞: ")
    current_blockchain = Blockchain(blockchain_name, owner)
    genesis_block = Block(0, blockchain_name, "0" * 64)  # –ì–µ–Ω–µ–∑–∏—Å –±–ª–æ–∫
    current_blockchain.blocks.append(genesis_block)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫—á–µ–π–Ω –≤ —Ñ–∞–π–ª
    if not os.path.exists(BLOCKCHAIN_DIR):
        os.makedirs(BLOCKCHAIN_DIR)

    with open(blockchain_file, 'w') as file:
        json.dump({"blocks": [block.__dict__ for block in current_blockchain.blocks]}, file, indent=4)

    current_blockchain_file = blockchain_file
    console.print(f"[bold green]–ë–ª–æ–∫—á–µ–π–Ω '{blockchain_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.[/bold green]")

def load_blockchain():
    global current_blockchain, current_blockchain_file

    blockchain_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ")
    blockchain_hash = hashlib.sha256(blockchain_name.encode()).hexdigest()
    blockchain_file = os.path.join(BLOCKCHAIN_DIR, f"{blockchain_hash}.json")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–ª–æ–∫—á–µ–π–Ω
    if not os.path.exists(blockchain_file):
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –±–ª–æ–∫—á–µ–π–Ω —Å –∏–º–µ–Ω–µ–º '{blockchain_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/bold red]")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–∫—á–µ–π–Ω –∏–∑ —Ñ–∞–π–ª–∞
    with open(blockchain_file, 'r') as file:
        blockchain_data = json.load(file)
        current_blockchain = Blockchain(blockchain_name, "")
        current_blockchain.blocks = [Block.from_dict(block) for block in blockchain_data["blocks"]]
        current_blockchain_file = blockchain_file

    console.print(f"[bold green]–ë–ª–æ–∫—á–µ–π–Ω '{blockchain_name}' –∑–∞–≥—Ä—É–∂–µ–Ω.[/bold green]")

def view_blocks():
    if not current_blockchain:
        console.print("[bold red]–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.[/bold red]")
        return

    console.print("[bold blue]–¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:[/bold blue]")
    for block in current_blockchain.blocks:
        console.print(block)

def add_new_block():
    if not current_blockchain:
        console.print("[bold red]–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.[/bold red]")
        return

    data = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞: ")
    last_block = current_blockchain.blocks[-1]
    new_block = Block(last_block.index + 1, data, last_block.hash)
    current_blockchain.blocks.append(new_block)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
    with open(current_blockchain_file, 'w') as file:
        json.dump({"blocks": [block.__dict__ for block in current_blockchain.blocks]}, file, indent=4)

    console.print(f"[bold green]–ù–æ–≤—ã–π –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω '{current_blockchain.name}'.[/bold green]")

def run_tests():
    console.print("üß™ [bold magenta]–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...[/bold magenta]")
    try:
        subprocess.run(['pytest'], check=True)
    except subprocess.CalledProcessError as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}[/bold red]")

def display_menu():
    table = Table(title="–ú–µ–Ω—é pyChainLite", show_header=True, header_style="bold cyan")
    table.add_column("–ù–æ–º–µ—Ä", style="dim")
    table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="bold")

    table.add_row("1", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫—á–µ–π–Ω")
    table.add_row("2", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–æ–∫—á–µ–π–Ω")
    table.add_row("3", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏")
    table.add_row("4", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫")
    table.add_row("5", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    table.add_row("6", "–í—ã–π—Ç–∏")

    console.print(table)

def main():
    while True:
        display_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")

        if choice == '1':
            create_new_blockchain()
        elif choice == '2':
            load_blockchain()
        elif choice == '3':
            view_blocks()
        elif choice == '4':
            add_new_block()
        elif choice == '5':
            run_tests()
        elif choice == '6':
            console.print("[bold green]–í—ã—Ö–æ–¥...[/bold green]")
            break
        else:
            console.print("[bold red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 6.[/bold red]")

if __name__ == "__main__":
    main()
